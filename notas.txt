const mongoose = require('mongoose');

// Creamos los esquemas para nuestras colecciones
const userSchema = new mongoose.Schema({
  name: String,
  email: String
});

const messageSchema = new mongoose.Schema({
  text: String,
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }
});

// Creamos los modelos a partir de los esquemas
const User = mongoose.model('User', userSchema);
const Message = mongoose.model('Message', messageSchema);

// Creamos un nuevo usuario y un nuevo mensaje y establecemos el enlace entre ellos
const user = new User({ name: 'John', email: 'john@example.com' });
await user.save();

const message = new Message({ text: 'Hello world!', user: user._id });
await message.save();

// Podemos utilizar el método populate para rellenar el enlace con la información del usuario
const messageWithUser = await Message.findById(message._id).populate('user');
console.log(messageWithUser.user.name); // Imprime "John"

const User = mongoose.model('User', userSchema);
const Post = mongoose.model('Post', postSchema);

app.get('/posts', (req, res) => {
  Post.find({ user: req.query.userId }) // filtra las publicaciones por el id del usuario
    .select('-content') // excluye el contenido de los resultados
    .exec((err, posts) => {
      if (err) {
        return res.status(500).send(err);
      }
      res.send(posts);
    });
});
En este ejemplo, estamos usando el método select para especificar que se deben excluir los campos content de los resultados de la consulta.

También es posible usar el método select para excluir varios campos a la vez. Por ejemplo, para excluir el contenido y la fecha de modificación de las publicaciones, puedes usar el siguiente código:

Copy code
Post.find({ user: req.query.userId })
 



